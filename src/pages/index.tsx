import styles from "./index.module.css";
import { type NextPage } from "next";
import Head from "next/head";
import Link from "next/link";
import { signIn, signOut, useSession } from "next-auth/react";
import { Controller, useForm } from "react-hook-form";
import { trpc } from "../utils/trpc";
import { Button, FormControl, Input, TextField } from "@mui/material";

const Home: NextPage = () => {
  const { data: books = [] } = trpc.book.getAll.useQuery();

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <AddBook />
      <main className={styles.main}>
        {books.map((book) => {
          return <li key={book.id}>{book.title}</li>;
        })}
      </main>
    </>
  );
};

export default Home;

interface IAddBookInputs {
  title: string;
  author: string;
  isbn?: string;
}
const AddBook: React.FC = () => {
  const { control, handleSubmit } = useForm<IAddBookInputs>({
    defaultValues: {
      title: "",
      author: "",
      isbn: "",
    },
  });
  const utils = trpc.useContext();
  const mutation = trpc.book.create.useMutation({
    onSuccess() {
      utils.book.getAll.invalidate();
    },
  });

  const onSubmit = (data: IAddBookInputs) =>
    mutation.mutate({
      ...data,
    });
  return (
    <FormControl onSubmit={handleSubmit(onSubmit)}>
      <Controller
        name="title"
        control={control}
        render={({ field }) => (
          <TextField margin="normal" label="title" {...field} />
        )}
      />
      <Controller
        name="author"
        control={control}
        render={({ field }) => (
          <TextField margin="normal" label="author" {...field} />
        )}
      />
      <Controller
        name="isbn"
        control={control}
        render={({ field }) => (
          <TextField margin="normal" label="isbn" {...field} />
        )}
      />
      <Button type="submit" />
    </FormControl>
  );
};

const AuthShowcase: React.FC = () => {
  const { data: sessionData } = useSession();

  const { data: secretMessage } = trpc.auth.getSecretMessage.useQuery(
    undefined, // no input
    { enabled: sessionData?.user !== undefined }
  );

  return (
    <div className={styles.authContainer}>
      <p className={styles.showcaseText}>
        {sessionData && <span>Logged in as {sessionData.user?.name}</span>}
        {secretMessage && <span> - {secretMessage}</span>}
      </p>
      <button
        className={styles.loginButton}
        onClick={sessionData ? () => signOut() : () => signIn()}
      >
        {sessionData ? "Sign out" : "Sign in"}
      </button>
    </div>
  );
};
